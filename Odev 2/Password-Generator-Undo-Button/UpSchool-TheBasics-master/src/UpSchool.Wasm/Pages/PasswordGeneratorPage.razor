@page "/passwordGenerator"
@page "/passwordGenerator/{PasswordLength:int}"
@page "/passwordGenerator/{PasswordLength:int}/{UserName}"
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Services
@using UpSchool.Domain.Utilities
@using UpSchool.Wasm.Common.Utilities
@using UpSchool.Wasm.Components
@inject IJSRuntime JsRuntime
@inject IToasterService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="card-title text-center">
                        <h2 class="text-info">
                            Password Generator @if(!string.IsNullOrEmpty(UserName)) @UserName
                        </h2>
                        <p>Create secure passwords with our Password Generator </p>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-7"> 
                            <p>@password</p>
                        </div>
                            <div class="col-md-1">
                                <span @onclick=@Undo class="@($"oi oi-action-undo {UndoButton}")" aria-hidden="true"></span>
                            </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => SavePasswordAsync())" class="oi oi-folder clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => CopyToClipboardAsync())" class="oi oi-document clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick=@GeneratePassword class="oi oi-loop-circular clickable" aria-hidden="true"></span>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <hr class=@CssColourClass style="height: 2vh !important;" />
                </div>
            </div>
        </div>

    </div>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-body">
                    <div class="mt-2 text-center">
                        <label>
                            Password Length <span class="@($"badge {CssColourClass}")">@generatePasswordDto.Length</span>
                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers" />
                        <label class="form-check-label" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars" />
                        <label class="form-check-label" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars" />
                        <label class="form-check-label" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars" />
                        <label class="form-check-label" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <SavedPasswordsCard 
        savedPasswords="@savedPasswords" 
        OnCopyToClipboardAsync="CopyToClipboardAsync"
                            OnClearSavedPasswords=@ClearSavedPasswords />

</div>


@code
{
    [Parameter]
    public int? PasswordLength { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();

    public string password = string.Empty;

    public string CssColourClass = "bg-danger";

    public string UndoButton = "text-secondary"; // .text-secondary = color

    public Stack<string> previousPasswords = new Stack<string>(); // Stack ; Stack Class; Collections of primitives ;Stack<int> s = new Stack<int>();

    private List<string> savedPasswords; // saved passwords and call passwordgeneratorpage 

    public PasswordGeneratorPage() 
    {
    }
    protected override async Task OnInitializedAsync()
    {
        savedPasswords = new List<string>();

        if (PasswordLength.HasValue) generatePasswordDto.Length = PasswordLength.Value;

        GeneratePassword();

        var localStoragePasswords = await LocalStorage.GetItemAsync<List<string>>("savedPasswords");

        if (localStoragePasswords is not null) savedPasswords = localStoragePasswords;

        await base.OnInitializedAsync();
    }

    private ValueTask SavePasswordAsync()
    {
        ToastService.ShowSuccess("The selected password was successfully saved.");

        if (savedPasswords.Any(x => x == password)) return ValueTask.CompletedTask;

        savedPasswords.Add(password);

        return LocalStorage.SetItemAsync("savedPasswords", savedPasswords);
    }

    private void GeneratePassword()
    {
        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(password.Length);

        //savedPasswords.Add(password); ??
       PreviousPasswords();
    }
    private void PreviousPasswords() // Stack ; Property= count ; Method= push, pop, peek, clear
    {
        previousPasswords.Push(password); // push(value) func. ; önceki şifreleri ekle; Yeni elemanın kendisinden sonraki eleman yığının bir önceki en üst elemanıdır ve yeni eklenen elemanın sonraki işaretçi alanına bir önceki en üst elemanın bellek adresi yazılır.

        if (previousPasswords.Count == 1) //eğer bir şifre var ise butonu  gri yap
        {
            UndoButton = "text-secondary"; // color
        }
        else if (previousPasswords.Count >= 1) // birden fazla şifre birikti ise tıklamaya devam et
        {
            UndoButton = "clickable";
        }
    }

    private void Undo() // değeri yok
    {
        if (previousPasswords.Count == 0) //Eğer hiç şifre yok ise, butonu gri yap 
        {
            UndoButton = "text-secondary"; // color
            return;
        }

        password = previousPasswords.Pop(); // pop() func; önceki şifreleri çıkar.Son giren ilk çıkar.
    }

    private async Task CopyToClipboardAsync()
    {
        ToastService.ShowSuccess("The selected password was copied to the clipboard.");

        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adı geldi.");
                break;

        }

        password = passwordGenerator.Generate(generatePasswordDto);
      PreviousPasswords(); // yönlendir ve şifreleri ekle
    }

    private void OnInputChange(ChangeEventArgs args)
    {
        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length);

    }

    

    private void ClearSavedPasswords()
    {
        savedPasswords.Clear();
    }
}

<style>
    body {
        background: #393E46
    }
</style>